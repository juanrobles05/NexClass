from django.db import models
from users.models import Teacher, Student
from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone


class RatingObserver:
    """
    Patr√≥n Observer - Interfaz base para observadores de calificaciones.
    
    El patr√≥n Observer permite definir una dependencia uno-a-muchos entre objetos,
    de manera que cuando un objeto cambia de estado, todos sus dependientes son
    notificados y actualizados autom√°ticamente.
    
    En este caso, cuando se crea una calificaci√≥n (Subject), m√∫ltiples observadores
    son notificados para realizar acciones espec√≠ficas.
    """
    def update(self, rating):
        """M√©todo que debe implementar cada observador concreto"""
        raise NotImplementedError("Los observadores deben implementar el m√©todo update()")


class EmailNotificationObserver(RatingObserver):
    """Observer concreto que env√≠a notificaciones por email al profesor"""
    
    def update(self, rating):
        """Env√≠a email al profesor notificando la nueva calificaci√≥n"""
        print(f"üîî Observer EMAIL activado para rating ID {rating.id}")
        print(f"üìß Intentando enviar email a: {rating.teacher.user.email}")
        
        try:
            subject = f"Nueva calificaci√≥n recibida - {rating.rating}/5 estrellas"
            message = f"""
            Hola {rating.teacher.user.name},
            
            Has recibido una nueva calificaci√≥n:
            
            Estudiante: {rating.student.user.name}
            Calificaci√≥n: {rating.rating}/5 estrellas
            Comentario: {rating.comment or 'Sin comentario'}
            Fecha: {rating.created_at.strftime('%d/%m/%Y %H:%M')}
            
            ¬°Sigue brindando excelente educaci√≥n!
            
            Saludos,
            El equipo de NexClass
            """
            
            print(f"üìù Preparando email:")
            print(f"   Asunto: {subject}")
            print(f"   Para: {rating.teacher.user.email}")
            print(f"   Desde: {settings.DEFAULT_FROM_EMAIL}")
            
            result = send_mail(
                subject=subject,
                message=message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[rating.teacher.user.email],
                fail_silently=False
            )
            
            if result == 1:
                print(f"‚úÖ Email enviado exitosamente a {rating.teacher.user.email}")
            else:
                print(f"‚ö†Ô∏è Email no pudo ser enviado. Resultado: {result}")
                
        except Exception as e:
            print(f"‚ùå Error enviando email: {e}")
            print(f"‚ùå Tipo de error: {type(e).__name__}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")


class StatisticsUpdateObserver(RatingObserver):
    """Observer concreto que actualiza estad√≠sticas del profesor"""
    
    def update(self, rating):
        """Actualiza el promedio de calificaciones del profesor"""
        print(f"üìä Observer ESTAD√çSTICAS activado para rating ID {rating.id}")
        try:
            teacher = rating.teacher
            all_ratings = teacher.ratings.all()
            if all_ratings:
                average = sum(r.rating for r in all_ratings) / all_ratings.count()
                teacher.average_rating = round(average, 2)
                teacher.save()
                print(f"‚úÖ Estad√≠sticas actualizadas para {teacher.user.name}: {average:.2f}")
        except Exception as e:
            print(f"‚ùå Error actualizando estad√≠sticas: {e}")


class ActivityLogObserver(RatingObserver):
    """Observer concreto que registra la actividad en logs"""
    
    def update(self, rating):
        """Registra la nueva calificaci√≥n en el log de actividad"""
        print(f"üìù Observer LOG activado para rating ID {rating.id}")
        try:
            log_message = (
                f"[{timezone.now()}] Nueva calificaci√≥n: "
                f"{rating.student.user.username} calific√≥ a "
                f"{rating.teacher.user.username} con {rating.rating}/5"
            )
            print(f"üìù LOG: {log_message}")
            
            # Aqu√≠ podr√≠as escribir a un archivo de log o base de datos
            # Por ahora solo imprimimos en consola para demostraci√≥n
        except Exception as e:
            print(f"‚ùå Error en log: {e}")


class TeacherRating(models.Model):
    """
    Modelo Subject del patr√≥n Observer.
    
    Mantiene una lista de observadores y los notifica cuando se crea una nueva calificaci√≥n.
    """
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, related_name='ratings')
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    rating = models.PositiveIntegerField()
    comment = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    # Lista de observadores (patr√≥n Observer)
    _observers = []
    
    class Meta:
        unique_together = ('teacher', 'student')  # Un estudiante solo puede calificar a un profesor una vez
    
    @classmethod
    def add_observer(cls, observer):
        """Agrega un observador a la lista de notificaci√≥n"""
        if observer not in cls._observers:
            cls._observers.append(observer)
            print(f"üëÅÔ∏è Observer agregado: {observer.__class__.__name__}")
    
    @classmethod
    def remove_observer(cls, observer):
        """Remueve un observador de la lista"""
        if observer in cls._observers:
            cls._observers.remove(observer)
            print(f"üö´ Observer removido: {observer.__class__.__name__}")
    
    def notify_observers(self):
        """Notifica a todos los observadores sobre la nueva calificaci√≥n"""
        print(f"üì¢ Notificando a {len(self._observers)} observadores...")
        for observer in self._observers:
            try:
                observer.update(self)
            except Exception as e:
                print(f"‚ùå Error en observer {observer.__class__.__name__}: {e}")
    
    def save(self, *args, **kwargs):
        """Override del m√©todo save para implementar el patr√≥n Observer"""
        # Verificar si es una nueva calificaci√≥n
        is_new = self.pk is None
        print(f"üíæ TeacherRating.save() llamado - is_new: {is_new}, PK: {self.pk}")
        
        # Llamar al m√©todo save original
        super().save(*args, **kwargs)
        print(f"üíæ Despu√©s de super().save() - PK: {self.pk}")
        
        # Ejecutar observers tanto para nuevas calificaciones como para actualizaciones
        if is_new:
            print(f"üöÄ Ejecutando notify_observers() porque es una NUEVA calificaci√≥n")
            self.notify_observers()
        else:
            print(f"üîÑ Ejecutando notify_observers() porque es una ACTUALIZACI√ìN de calificaci√≥n")
            self.notify_observers()
    
    def __str__(self):
        return f"{self.student.user.username} -> {self.teacher.user.username}: {self.rating}/5"


# Auto-registro de observadores cuando se importa el m√≥dulo
# Esto demuestra el patr√≥n Observer en acci√≥n
TeacherRating.add_observer(EmailNotificationObserver())
TeacherRating.add_observer(StatisticsUpdateObserver())
TeacherRating.add_observer(ActivityLogObserver())
